# -*- coding: utf-8 -*-
"""kmeans.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18OMLgPfgymJgzL8siAE3wikqXG4CyK5S
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import style
style.use('dark_background')

from google.colab import drive
drive.mount('/content/drive')

data = pd.read_csv('Mall_Customers.csv')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/PythonScripts/Assign02

data.head()

type(data)

X = data[["Annual Income (k$)","Spending Score (1-100)"]].to_numpy()

from sklearn.cluster import KMeans
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters = i, init = 'k-means++')
    kmeans.fit(X)
    wcss.append(kmeans.inertia_)

plt.figure(figsize = (10,6))
plt.plot(range(1, 11), wcss, lw = 3)
plt.title('The Elbow Method', fontsize = 25)
plt.xlabel('Number of clusters', fontsize = 15)
plt.ylabel('WCSS', fontsize =15 )
plt.show()

from sklearn.cluster import KMeans

kmeans = KMeans(n_clusters = 5, init = 'k-means++')
y_pred = kmeans.fit_predict(X)

y_pred

y_pred.shape

sum(y_pred == 0)

kmeans.cluster_centers_

X[y_pred == 0, 0]

X[y_pred == 0, 1]

plt.figure(figsize = (12,8))
plt.scatter(X[y_pred == 0, 0], X[y_pred == 0, 1], s = 100, c = 'red', label = 'Cluster 1')
plt.scatter(X[y_pred == 1, 0], X[y_pred == 1, 1], s = 100, c = 'blue', label = 'Cluster 2')
plt.scatter(X[y_pred == 2, 0], X[y_pred == 2, 1], s = 100, c = 'green', label = 'Cluster 3')
plt.scatter(X[y_pred == 3, 0], X[y_pred == 3, 1], s = 100, c = 'orange', label = 'Cluster 4')
plt.scatter(X[y_pred == 4, 0], X[y_pred == 4, 1], s = 100, c = 'pink', label = 'Cluster 5')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 300, c = 'yellow', label = 'Centroids')
plt.title('Clusters', fontsize = 25)
plt.xlabel('First Feature', fontsize = 15)
plt.ylabel('Second Feature', fontsize = 15)
plt.legend(fontsize = 15)
plt.show()

import sklearn
sklearn.metrics.calinski_harabasz_score(X, y_pred)

kmeans = KMeans(n_clusters = 2, init = 'k-means++')
y_pred = kmeans.fit_predict(X)

import sklearn
sklearn.metrics.calinski_harabasz_score(X, y_pred)

kmeans = KMeans(n_clusters = 4, init = 'k-means++')
y_pred = kmeans.fit_predict(X)

import sklearn
sklearn.metrics.calinski_harabasz_score(X, y_pred)

kmeans = KMeans(n_clusters = 10, init = 'k-means++')
y_pred = kmeans.fit_predict(X)

import sklearn
sklearn.metrics.calinski_harabasz_score(X, y_pred)

kmeans = KMeans(n_clusters = 3, init = 'k-means++')
y_pred = kmeans.fit_predict(X)

import sklearn
sklearn.metrics.calinski_harabasz_score(X, y_pred)

kmeans = KMeans(n_clusters = 5, init = 'k-means++')
y_pred = kmeans.fit_predict(X)

import sklearn
sklearn.metrics.calinski_harabasz_score(X, y_pred)